/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HomeNetAppGui.java
 *
 * Created on May 11, 2011, 3:14:05 PM
 */
package homenetapp;
import java.util.*;
//import java.awt.*;
import javax.swing.*;
import javax.swing.plaf.basic.*;
import java.io.*;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import java.net.*;
import java.security.KeyStore;
import javax.net.ssl.*;
//import java.security.*;
import java.security.cert.*;
import org.apache.commons.codec.binary.Base64;

import homenet.XmlrpcClient;
/**
 *
 * @author mdoll
 */
public class HomeNetAppGui extends javax.swing.JFrame {

    /** Creates new form HomeNetAppGui */
    public HomeNetAppGui() {
        
         homenetapp = new HomeNetApp();
        
        //if not configured
        if(true){
            System.out.println("HomeNet App Not Setup");
            System.out.println("Launching Setup Wizard");
            JFrame setupFrame = new SetupWizardGui();
            setupFrame.addWindowListener(new setupFrameEventHandler());
            setupFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
            setupFrame.setVisible(true);
        } else {
            startHomeNetApp();
        }
        
        
        //redirect console to gui
        //redirectSystemStreams();
        
        

    }
    
    private void startHomeNetApp(){
        
        try {
            homenetapp.start();
        } catch (Exception e){
            //show popup and exit program
            System.err.println(e.getMessage());
        }
        
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent winEvt) {
                // Perhaps ask user if they want to save any unsaved files first.
                System.out.println("Exiting");
                homenetapp.exit();
                System.exit(0); 
            }
        });
        
        
        initComponents();
       
        loadSettings();
        
        SetupMenuSerialPorts();
        SendPacketFrame.setLocationRelativeTo(null);
    }
    
            class setupFrameEventHandler extends WindowAdapter {
  public void windowClosing(WindowEvent evt) {
    //check to make sure all the settings are good
      System.out.println("Checking New Config");
      //then reboot the app
      System.out.println("rebooting app with new config");
      SwingUtilities.invokeLater(new Runnable() {  
        public void run() {  
      startHomeNetApp();
        }});
  }
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SendPacketFrame = new javax.swing.JFrame();
        sendPacketButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        toNodeLabel = new javax.swing.JLabel();
        toNodeSpinner = new javax.swing.JSpinner();
        toDeviceLabel = new javax.swing.JLabel();
        toDeviceSpinner = new javax.swing.JSpinner();
        fromNodeLabel = new javax.swing.JLabel();
        fromNodeSpinner = new javax.swing.JSpinner();
        fromDeviceSpinner = new javax.swing.JLabel();
        commandLabel = new javax.swing.JLabel();
        commandComboBox = new javax.swing.JComboBox();
        payloadLabel = new javax.swing.JLabel();
        payloadTextField = new javax.swing.JTextField();
        jSpinner4 = new javax.swing.JSpinner();
        jSplitPane1 = new javax.swing.JSplitPane();
        SettingsDialog = new javax.swing.JDialog();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        serverLabel = new javax.swing.JLabel();
        apiKeyLabel = new javax.swing.JLabel();
        serverTextField = new javax.swing.JTextField();
        apiKeyTextField = new javax.swing.JTextField();
        testButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        certPropertiesLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel6 = new javax.swing.JPanel();
        settingsSaveButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lastPacketTextArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoleTextPane = new javax.swing.JTextPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuToolsSendPacket = new javax.swing.JMenuItem();
        menuToolsSettings = new javax.swing.JMenuItem();
        menuSerialPorts = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenu();
        menuHelpOnline = new javax.swing.JMenuItem();
        menuHelpAbout = new javax.swing.JMenuItem();

        SendPacketFrame.setTitle("Send Packet");
        SendPacketFrame.setMinimumSize(new java.awt.Dimension(380, 240));
        SendPacketFrame.setResizable(false);

        sendPacketButton.setText("Send");
        sendPacketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPacketButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Packet"));

        toNodeLabel.setText("To Node: ");

        toNodeSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 4095, 1));

        toDeviceLabel.setText("To Device:");

        toDeviceSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 15, 1));

        fromNodeLabel.setText("From Node:");

        fromNodeSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 4095, 1));

        fromDeviceSpinner.setText("From Device:");

        commandLabel.setText("Command:");

        commandComboBox.setModel(new javax.swing.DefaultComboBoxModel(homenetapp.getCommandKeys()));
        commandComboBox.setRenderer(new CommandRenderer());

        payloadLabel.setText("Payload:");

        jSpinner4.setModel(new javax.swing.SpinnerNumberModel(0, 0, 15, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(payloadLabel)
                    .addComponent(commandLabel)
                    .addComponent(fromNodeLabel)
                    .addComponent(toNodeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(commandComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(toNodeSpinner)
                            .addComponent(fromNodeSpinner))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fromDeviceSpinner)
                            .addComponent(toDeviceLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(toDeviceSpinner, 0, 0, Short.MAX_VALUE)
                            .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE))
                    .addComponent(payloadTextField))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toNodeLabel)
                    .addComponent(toNodeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDeviceLabel)
                    .addComponent(toDeviceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromNodeLabel)
                    .addComponent(fromNodeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromDeviceSpinner)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(commandLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payloadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payloadLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SendPacketFrameLayout = new javax.swing.GroupLayout(SendPacketFrame.getContentPane());
        SendPacketFrame.getContentPane().setLayout(SendPacketFrameLayout);
        SendPacketFrameLayout.setHorizontalGroup(
            SendPacketFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SendPacketFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SendPacketFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendPacketButton)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SendPacketFrameLayout.setVerticalGroup(
            SendPacketFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SendPacketFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendPacketButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SettingsDialog.setTitle("HomeNet Settings");
        SettingsDialog.setMinimumSize(new java.awt.Dimension(400, 300));

        serverLabel.setText("Server:");

        apiKeyLabel.setText("API Key:");

        serverTextField.setEditable(false);
        serverTextField.setText("homenet.me");

        apiKeyTextField.setText("reallylongstringofchars");

        testButton.setText("Test");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("SSL Cert:");

        certPropertiesLabel.setText("Signed By");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(apiKeyLabel)
                        .addComponent(serverLabel))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(certPropertiesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                        .addComponent(testButton))
                    .addComponent(apiKeyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addComponent(serverTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apiKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apiKeyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testButton)
                    .addComponent(jLabel1)
                    .addComponent(certPropertiesLabel))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Server", jPanel4);

        portLabel.setText("Port:");

        portTextField.setEditable(false);
        portTextField.setText("2443");

        jCheckBox2.setText("Enable UPnP Portforwarding");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Enable Incoming Packets");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addContainerGap(246, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(portLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(314, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addContainerGap(228, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Client", jPanel5);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 142, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("SSL", jPanel6);

        settingsSaveButton.setText("Save");
        settingsSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsSaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SettingsDialogLayout = new javax.swing.GroupLayout(SettingsDialog.getContentPane());
        SettingsDialog.getContentPane().setLayout(SettingsDialogLayout);
        SettingsDialogLayout.setHorizontalGroup(
            SettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SettingsDialogLayout.createSequentialGroup()
                .addContainerGap(333, Short.MAX_VALUE)
                .addComponent(settingsSaveButton)
                .addContainerGap())
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        SettingsDialogLayout.setVerticalGroup(
            SettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SettingsDialogLayout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsSaveButton)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Server");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HomeNet.me Desktop App");

        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jLabel9.setText("Last Packet Received:");

        lastPacketTextArea.setColumns(20);
        lastPacketTextArea.setRows(5);
        jScrollPane2.setViewportView(lastPacketTextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                    .addComponent(jLabel9))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane2.setLeftComponent(jPanel2);

        consoleTextPane.setBackground(new java.awt.Color(0, 0, 0));
        consoleTextPane.setEditable(false);
        consoleTextPane.setFont(new java.awt.Font("Consolas", 0, 10));
        consoleTextPane.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(consoleTextPane);

        jSplitPane2.setRightComponent(jScrollPane1);

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        jLabel7.setText("Status:");

        jLabel8.setText("Connected");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap(356, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel8)
                .addComponent(jLabel7))
        );

        menuFile.setMnemonic('f');
        menuFile.setText("File");

        jMenuItem3.setMnemonic('e');
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        menuFile.add(jMenuItem3);

        jMenuBar1.add(menuFile);

        menuTools.setMnemonic('t');
        menuTools.setText("Tools");

        menuToolsSendPacket.setMnemonic('p');
        menuToolsSendPacket.setText("Send Packet");
        menuToolsSendPacket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuToolsSendPacketActionPerformed(evt);
            }
        });
        menuTools.add(menuToolsSendPacket);

        menuToolsSettings.setMnemonic('s');
        menuToolsSettings.setText("Settings");
        menuToolsSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuToolsSettingsActionPerformed(evt);
            }
        });
        menuTools.add(menuToolsSettings);

        menuSerialPorts.setMnemonic('e');
        menuSerialPorts.setText("Select Ports");
        menuSerialPorts.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuSerialPortsMenuSelected(evt);
            }
        });
        menuTools.add(menuSerialPorts);

        jMenuBar1.add(menuTools);

        menuHelp.setMnemonic('h');
        menuHelp.setText("Help");

        menuHelpOnline.setText("Online Help");
        menuHelpOnline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpOnlineActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpOnline);

        menuHelpAbout.setText("About");
        menuHelpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void menuHelpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpAboutActionPerformed
      // new jDialog1();
       // AboutDialog.setVisible(true);
        
        JOptionPane.showMessageDialog(null, "<html>Developed by Matthew Doll<br>Licenced Under GPLv3<br>For more info visit HomeNet.me</html>", "About", JOptionPane.INFORMATION_MESSAGE); 
        
        
    }//GEN-LAST:event_menuHelpAboutActionPerformed

    private void menuToolsSendPacketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuToolsSendPacketActionPerformed
        SendPacketFrame.setVisible(true);
    }//GEN-LAST:event_menuToolsSendPacketActionPerformed

    private void sendPacketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPacketButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendPacketButtonActionPerformed

    private void menuHelpOnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpOnlineActionPerformed

        if (!java.awt.Desktop.isDesktopSupported()) {

            System.err.println("Desktop is not supported (fatal)");
            System.exit(1);
        }

        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();

        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {

            System.err.println("Desktop doesn't support the browse action (fatal)");
            System.exit(1);
        }

        try {

            java.net.URI uri = new java.net.URI("http://homenet.me");
            desktop.browse(uri);
        } catch (Exception e) {

            System.err.println(e.getMessage());
        }


    }//GEN-LAST:event_menuHelpOnlineActionPerformed

    private void loadSettings(){
        serverTextField.setText(homenetapp.config.getString("settings.server"));    
        apiKeyTextField.setText(homenetapp.config.getString("settings.apikey"));
        portTextField.setText(homenetapp.config.getString("settings.port"));
            
        
       // homenetapp.commands
                
//       for (Map.Entry<Integer, String[]> entry : homenetapp.commands.entrySet()) {
//         Integer key = entry.getKey();
//         String[] value = entry.getValue();
//            // ...
//        }

    }
    
    class CommandRenderer extends BasicComboBoxRenderer {

        public java.awt.Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            Integer item = (Integer) value;
            if (value != null) {
               // Integer item = (Integer) value;
                setText(homenetapp.commands.get(item)[1]);
                return this;
            }

            if (index == -1) {
              //  setText("Select Command");
                // Item item = (Item) value;
              //  setText("index -1");// + item.getId()
              //  System.out.println(homenetapp.commands.get(item)[1]);
            }


            return this;
        }
    }
    
    

    
    private void SetupMenuSerialPorts(){
        
        List<String> savedPorts = homenetapp.config.getList("ports.serial");
    
        ArrayList<String> ports = homenet.Serial.listPorts();
        Iterator<String> i = ports.iterator();
        while (i.hasNext()) {
            String element = i.next();
            System.out.println(element);
            javax.swing.JCheckBoxMenuItem serialPortCheckBox = new javax.swing.JCheckBoxMenuItem(element);
            if(savedPorts.contains(element)){
                serialPortCheckBox.setSelected(true);
                //serialPortCheckBox.
            }
            serialPortCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSerialPortCheckBoxAction(evt);
            }
        });
         
           // serialPortCheckBox.setMnemonic(java.awt.event.KeyEvent.VK_1);
            menuSerialPorts.add(serialPortCheckBox);
        }
    }
    
    private void menuSerialPortCheckBoxAction(java.awt.event.ActionEvent evt) {
        JCheckBoxMenuItem checkbox = (JCheckBoxMenuItem)evt.getSource();
        if(checkbox.isSelected()){
            System.out.println("Selected");
        } else {
            System.out.println("Not Selected");
        }
    }
    
    private void menuSerialPortsMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuSerialPortsMenuSelected
        System.out.println("Menu Selected");
        
       //javax.swing.JCheckBoxMenuItem cbMenuItem = new javax.swing.JCheckBoxMenuItem("A check box menu item");
        //cbMenuItem.setMnemonic(KeyEvent.VK_C);
        //menuSerialPorts.add(cbMenuItem);
        
        
        //decide which ones to add
        
        //decide which ones to remove
        
        
        
    }//GEN-LAST:event_menuSerialPortsMenuSelected

    private void menuToolsSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuToolsSettingsActionPerformed
        SettingsDialog.setVisible(true);
    }//GEN-LAST:event_menuToolsSettingsActionPerformed

    private void settingsSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsSaveButtonActionPerformed
        //save properties
        //page1
        homenetapp.config.setProperty("settings.server", serverTextField.getText());    
        homenetapp.config.setProperty("settings.apikey", apiKeyTextField.getText());
        homenetapp.config.setProperty("settings.port", portTextField.getText());
        
        try {
            homenetapp.config.save();
        } catch(Exception e){ }
        
        SettingsDialog.setVisible(false);
    }//GEN-LAST:event_settingsSaveButtonActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        SwingUtilities.invokeLater(new Runnable() {  
        public void run() {  
        try {
//        URL url = new URL("https://mail.google.com/");
//        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
//        conn.connect();
//        Certificate[] certs = conn.getServerCertificates();
//        
//       
//         System.out.println("Cert Chain Length: "+certs.length);
//         
//        Certificate c = certs[0];
//        X509Certificate xc = (X509Certificate) c;
//        
//        String[] from = homenetapp.splitTokens(xc.getIssuerX500Principal().getName(),"=, ");
//        String[] to = homenetapp.splitTokens(xc.getSubjectX500Principal().getName(),"=, ");
//        
//        certPropertiesLabel.setText("<html>Issued by: "+from[1]+"<br>For: "+to[1]+"<br>Expires: "+xc.getNotAfter()+"</html>");
//        
//        
//             System.out.println("Cert: "+c.getType());
//             
//             System.out.println("Not After: "+xc.getNotAfter());
//             System.out.println("Subject DN: "+xc.getSubjectX500Principal());
//             System.out.println("Issuer DN: "+xc.getIssuerX500Principal());
//             System.out.println("getSigAlgName: "+xc.getSigAlgName());
             
             XmlrpcClient xmlrpcClient = new XmlrpcClient("homenet.me",apiKeyTextField.getText());
              String reply = (String)xmlrpcClient.execute("HomeNet.validateApikey", apiKeyTextField.getText());
              
              if(!reply.equals("true")){
                 JOptionPane.showMessageDialog(null, reply, "Error", JOptionPane.ERROR_MESSAGE); 
                 return;
              }
              
             
             
             
             
             
 
//             KeyStore mykeystore = KeyStore.getInstance("JKS");
//
//            java.security.KeyFactory rSAKeyFactory = java.security.KeyFactory.getInstance("RSA");
//            
//            java.security.PublicKey pk = xc.getPublicKey();;
//            
//            java.security.spec.PKCS8EncodedKeySpec keySpec = new
//            java.security.spec.PKCS8EncodedKeySpec(pk.getEncoded());
//            java.security.KeyFactory keyFactory = null;
//            keyFactory = keyFactory.getInstance("RSA");
//            java.security.PrivateKey privateKey = keyFactory.generatePrivate(keySpec);
//                    
////            mykeystore.setEntry("HomeNet",        
////                    new KeyStore.PrivateKeyEntry(privateKey, certs),
////                    new KeyStore.PasswordProtection("keypassword".toCharArray()));
//
//             FileOutputStream sigfos = new FileOutputStream("test2.txt");
//
//             
//             mykeystore.setKeyEntry("HomeNet", privateKey.getEncoded(), certs);
//             mykeystore.store(sigfos, "mysecret".toCharArray());
//             sigfos.close();
             
         
         
        //if(URLConnection.class.getName() == )
        //conn.
        } catch(Exception e){
            
             certPropertiesLabel.setText("Invalid Server");
           // System.out.println(e.getMessage());
        e.printStackTrace();
        }
        
        }
        });
//
//// Sending information through HTTPS: POST
//OutputStream ostream = conn.getOutputStream();
//ostream.write(....);
//......
//ostream.close();
//        
        
    }//GEN-LAST:event_testButtonActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jCheckBox1ActionPerformed

    class NodeVerifier extends javax.swing.InputVerifier {
         public boolean verify(javax.swing.JComponent input) {
 	       javax.swing.JTextField tf = (javax.swing.JTextField) input;
               int value = Integer.parseInt(tf.getText());
               
               if(value >= 0 && value < 16 ){
                   return true;
               }
               return false;
         }
     }
    
        private void updateTextPane(final String text) {  
      SwingUtilities.invokeLater(new Runnable() {  
        public void run() {  
          javax.swing.text.Document doc = consoleTextPane.getDocument();  
          try {  
            doc.insertString(doc.getLength(), text, null);  
          } catch (javax.swing.text.BadLocationException e) {  
            throw new RuntimeException(e);  
          }  
          consoleTextPane.setCaretPosition(doc.getLength() - 1);  
        }  
      });  
    }  
      
    private void redirectSystemStreams() {  
      OutputStream out = new OutputStream() {  
        @Override  
        public void write(final int b) throws IOException {  
          updateTextPane(String.valueOf((char) b));  
        }  
      
        @Override  
        public void write(byte[] b, int off, int len) throws IOException {  
          updateTextPane(new String(b, off, len));  
        }  
      
        @Override  
        public void write(byte[] b) throws IOException {  
          write(b, 0, b.length);  
        }  
      };  
      
      System.setOut(new PrintStream(out, true));  
      System.setErr(new PrintStream(out, true));  
    }  
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new HomeNetAppGui().setVisible(true);

            }
        });
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame SendPacketFrame;
    private javax.swing.JDialog SettingsDialog;
    private javax.swing.JLabel apiKeyLabel;
    private javax.swing.JTextField apiKeyTextField;
    private javax.swing.JLabel certPropertiesLabel;
    private javax.swing.JComboBox commandComboBox;
    private javax.swing.JLabel commandLabel;
    private javax.swing.JTextPane consoleTextPane;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel fromDeviceSpinner;
    private javax.swing.JLabel fromNodeLabel;
    private javax.swing.JSpinner fromNodeSpinner;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea lastPacketTextArea;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuHelpAbout;
    private javax.swing.JMenuItem menuHelpOnline;
    private javax.swing.JMenu menuSerialPorts;
    private javax.swing.JMenu menuTools;
    private javax.swing.JMenuItem menuToolsSendPacket;
    private javax.swing.JMenuItem menuToolsSettings;
    private javax.swing.JLabel payloadLabel;
    private javax.swing.JTextField payloadTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton sendPacketButton;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JTextField serverTextField;
    private javax.swing.JButton settingsSaveButton;
    private javax.swing.JButton testButton;
    private javax.swing.JLabel toDeviceLabel;
    private javax.swing.JSpinner toDeviceSpinner;
    private javax.swing.JLabel toNodeLabel;
    private javax.swing.JSpinner toNodeSpinner;
    // End of variables declaration//GEN-END:variables
 //hash map ports
    
    private HomeNetApp homenetapp;
//selected ports    
    
}
